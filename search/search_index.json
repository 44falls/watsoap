{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WATSOAP \u00b6 WATSOAP (What's The Status Of API) is a API health-checking monitoring tool Purpose \u00b6 The purpose of this tool is to automatically monitor the health of APIs. Manually monitoring the health of APIs is a time-consuming and painful task. Features \u00b6 Collects the current health status of configured APIs. Generates the health status reports in a variety of file formats. Prerequisite \u00b6 Install git , If it is already installed, ignore it. Install Python , If it is already installed, ignore it. If Poetry is not already installed on your local machine, proceed as follows. $ python -m pip install --upgrade pip $ pip install poetry Setup \u00b6 With GIT \u00b6 Clone this repository to your local machine. $ git https://github.com/nawinto99/watsoap.git Change the working directory as follows. $ cd watsoap Run following command which will install the necessary dependencies. $ poetry install Rename the .env.dummy file in the config folder to .env. Usage \u00b6 config.yml : This file contains information about the application configuration. .env : This file contains the Tokens, API keys, usernames and passwords, and other sensitive information. requests.yml : This file contains a list of requests, and the request's name should be unique in the list. requests_data.yml : This file contains the data required to initiate each request. Create one dictionary object for each request, and the name should exactly match the name mentioned in step one. Update config.yml \u00b6 The names of the keys must be distinct. It is recommended to use capital letters and underscores for separate words. The following keys should be updated HEALTH_REPORT_LOCATION : The location where the health status reports will be stored. HEALTH_REPORT_TYPE : Health status report format. Select one of the following options. - CSV - JSON Sample: \u00b6 LOG_FILE_LOCATION: ~/logs/watsoap/ HEALTH_REPORT_LOCATION: ~/logs/watsoap/ HEALTH_REPORT_TYPE: CSV Update .env \u00b6 The names of the environmental variables must be distinct. It is recommended to use capital letters and underscores for separate words. Sample: \u00b6 DOMAIN=example.org ADMIN_EMAIL=admin@${DOMAIN} BASIC_AUTH_GENERIC= { \"user_name\":\"dummy_user\", \"password\":\"dummypassword\"} MOCKBIN= { \"user_name\":\"sample\", \"password\":\"sample\"} Update requests.yml \u00b6 Create the list and map key name as endpoints . The name of the request should be unique in the list. It is recommended to use capital letters and underscores for separate words. Sample: \u00b6 endpoints: - MOCKBIN - JSON_PLACE_HOLDER Update requests_data.yml \u00b6 Create one dictionary object for each request, and the map key name should exactly match with the request name. For each dictionary object create following keys base_url[MANDATORY] : Complete API URL Path. method[MANDATORY] : The HTTP request method to perform the desired action on a given resource. HTTP request methods headers[OPTIONAL] : Custom HTTP headers. payload[OPTIONAL] Request payload. params[OPTIONAL] : Request query strings. auth_type[MANDATORY] : To access the resources, choose one of the following authentication types. - NO-AUTH - BASIC - API-KEY auth_env_name[OPTIONAL] : The name of the authentication environment variable should exactly match the name of the environment variable created in the.env file. Sample: \u00b6 GENERIC: doc: > This is the generic section where requests fetch the common data for all APIs. payload: | { \"body\": \"bar\", \"userId\": 1 } headers: | { \"Content-Length\": \"253\", \"Content-Type\": \"application/json\", \"x-pretty-print\": \"2\" } MOCKBIN: base_url: \"http://mockbin.com/request\" method: \"POST\" headers: \"GENERIC\" payload: | { \"foo\": \"bar\" } params: | { \"foo\":[\"bar\",\"baz\"] } auth_type: \"BASIC\" auth_env_name: \"MOCKBIN\" Run the application \u00b6 $ chmod +x run.sh $ ./run.sh","title":"Home"},{"location":"#watsoap","text":"WATSOAP (What's The Status Of API) is a API health-checking monitoring tool","title":"WATSOAP"},{"location":"#purpose","text":"The purpose of this tool is to automatically monitor the health of APIs. Manually monitoring the health of APIs is a time-consuming and painful task.","title":"Purpose"},{"location":"#features","text":"Collects the current health status of configured APIs. Generates the health status reports in a variety of file formats.","title":"Features"},{"location":"#prerequisite","text":"Install git , If it is already installed, ignore it. Install Python , If it is already installed, ignore it. If Poetry is not already installed on your local machine, proceed as follows. $ python -m pip install --upgrade pip $ pip install poetry","title":"Prerequisite"},{"location":"#setup","text":"","title":"Setup"},{"location":"#with-git","text":"Clone this repository to your local machine. $ git https://github.com/nawinto99/watsoap.git Change the working directory as follows. $ cd watsoap Run following command which will install the necessary dependencies. $ poetry install Rename the .env.dummy file in the config folder to .env.","title":"With GIT"},{"location":"#usage","text":"config.yml : This file contains information about the application configuration. .env : This file contains the Tokens, API keys, usernames and passwords, and other sensitive information. requests.yml : This file contains a list of requests, and the request's name should be unique in the list. requests_data.yml : This file contains the data required to initiate each request. Create one dictionary object for each request, and the name should exactly match the name mentioned in step one.","title":"Usage"},{"location":"#update-configyml","text":"The names of the keys must be distinct. It is recommended to use capital letters and underscores for separate words. The following keys should be updated HEALTH_REPORT_LOCATION : The location where the health status reports will be stored. HEALTH_REPORT_TYPE : Health status report format. Select one of the following options. - CSV - JSON","title":"Update config.yml"},{"location":"#sample","text":"LOG_FILE_LOCATION: ~/logs/watsoap/ HEALTH_REPORT_LOCATION: ~/logs/watsoap/ HEALTH_REPORT_TYPE: CSV","title":"Sample:"},{"location":"#update-env","text":"The names of the environmental variables must be distinct. It is recommended to use capital letters and underscores for separate words.","title":"Update .env"},{"location":"#sample_1","text":"DOMAIN=example.org ADMIN_EMAIL=admin@${DOMAIN} BASIC_AUTH_GENERIC= { \"user_name\":\"dummy_user\", \"password\":\"dummypassword\"} MOCKBIN= { \"user_name\":\"sample\", \"password\":\"sample\"}","title":"Sample:"},{"location":"#update-requestsyml","text":"Create the list and map key name as endpoints . The name of the request should be unique in the list. It is recommended to use capital letters and underscores for separate words.","title":"Update requests.yml"},{"location":"#sample_2","text":"endpoints: - MOCKBIN - JSON_PLACE_HOLDER","title":"Sample:"},{"location":"#update-requests_datayml","text":"Create one dictionary object for each request, and the map key name should exactly match with the request name. For each dictionary object create following keys base_url[MANDATORY] : Complete API URL Path. method[MANDATORY] : The HTTP request method to perform the desired action on a given resource. HTTP request methods headers[OPTIONAL] : Custom HTTP headers. payload[OPTIONAL] Request payload. params[OPTIONAL] : Request query strings. auth_type[MANDATORY] : To access the resources, choose one of the following authentication types. - NO-AUTH - BASIC - API-KEY auth_env_name[OPTIONAL] : The name of the authentication environment variable should exactly match the name of the environment variable created in the.env file.","title":"Update requests_data.yml"},{"location":"#sample_3","text":"GENERIC: doc: > This is the generic section where requests fetch the common data for all APIs. payload: | { \"body\": \"bar\", \"userId\": 1 } headers: | { \"Content-Length\": \"253\", \"Content-Type\": \"application/json\", \"x-pretty-print\": \"2\" } MOCKBIN: base_url: \"http://mockbin.com/request\" method: \"POST\" headers: \"GENERIC\" payload: | { \"foo\": \"bar\" } params: | { \"foo\":[\"bar\",\"baz\"] } auth_type: \"BASIC\" auth_env_name: \"MOCKBIN\"","title":"Sample:"},{"location":"#run-the-application","text":"$ chmod +x run.sh $ ./run.sh","title":"Run the application"}]}